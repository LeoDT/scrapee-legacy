scalar IntString
scalar DateTime

interface Node {
  id: ID!
}

type Bucket implements Node {
  id: ID!
}

input CreateBucketInput {
  id: ID!
  parentId: ID!
}

input TrashBucketInput {
  id: ID!
}

enum ScrapSource {
  clipper
}

enum ScrapType {
  text
  file
}

type ScrapContent {
  key: IntString!
  type: ScrapType!
  value: String!

  originalHTML: String
  xPath: String
}

input ScrapContentInput {
  key: IntString
  type: ScrapType!
  value: String!

  originalHTML: String
  xPath: String
}

type Scrap implements Node {
  id: ID!
  bucketId: ID!

  title: String
  content: [ScrapContent!]!

  source: ScrapSource
  sourceUrl: String

  createdAt: DateTime!
}

input CreateScrapInput {
  bucketId: ID!

  title: String
  content: [ScrapContentInput!]!

  source: ScrapSource
  sourceUrl: String

  createdAt: DateTime!
}

enum JobStatus {
  created
  queued
  started
  failed
  finished
}

interface Job {
  type: String!
  priority: Int!
  status: JobStatus!
  failReason: String
}

type PersistMediaJob implements Node & Job {
  id: ID!
  type: String!
  priority: Int!
  status: JobStatus!
  failReason: String
  bucket: Bucket
  scrap: Scrap
}

type Query {
  test: String
  buckets: [Bucket!]!
  bucket(id: String!): Bucket
  scraps(bucketId: ID!): [Scrap!]!
  jobs: [Job]
}

type Mutation {
  createBucket(input: CreateBucketInput!): Bucket
  trashBucket(input: TrashBucketInput!): Boolean

  createScrap(input: CreateScrapInput!): Scrap
}

schema {
  query: Query
  mutation: Mutation
}
